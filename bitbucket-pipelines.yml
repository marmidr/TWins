# This is a sample build configuration for C++ â€“ Make.
# Check our guides at https://confluence.atlassian.com/x/5Q4SMw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

image: gcc:8

# https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/

# maximum amount of minutes a step can execute at a global level or at a step level
options:
    max-time: 10

# shallow clone
clone:
    #depth: 3
    depth: full # SonarCloud scanner needs the full history to assign issues properly

# https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/
definitions:
    steps:
        - step: &build_and_test
            name: Build && test
            script:
                # prerequisites
                - apt-get update
                - apt-get install -y cmake
                - cmake --version
                - git submodule update --init --remote
                # build
                - mkdir build && cd build
                - cmake -DCMAKE_BUILD_TYPE=Debug -DTWINS_USE_SANITIZERS=OFF -DTWINS_BUILD_UT=ON ..
                - make -j4
                - ctest -V --output-on-failure --timeout 20

        - step: &build_and_test_and_cover
            name: Build, test && cover
            caches:
                - pip
            script:
                # prerequisites
                - apt-get update
                - apt-get install -y cmake
                - cmake --version
                - git submodule update --init --remote
                # build
                - mkdir build && cd build
                - cmake -DCMAKE_BUILD_TYPE=Debug -DTWINS_USE_SANITIZERS=OFF -DTWINS_BUILD_UT=ON ..
                - make -j4
                - ctest -V --output-on-failure --timeout 20
                # create coverage report
                # - apt-get install -y python-pip
                # - pip install cpp-coveralls gcovr
                # - coveralls -b . -r .. -i "lib/src" -i "lib/inc" -t W1vBS6Hvg6wtzaqdV2E4B4OVTIvxJmNXI

        - step: &build_and_test_sonar
            name: SonarScanner build && test
            trigger: manual
            script:
                # prerequisites
                - apt-get update
                - apt-get install -y cmake
                - cmake --version
                - git submodule update --init --remote
                #
                - export SONAR_SCANNER_VERSION=4.4.0.2170
                - export SONAR_ROOT=$BITBUCKET_CLONE_DIR/_sonar
                - export SONAR_SCANNER_HOME=$SONAR_ROOT/sonar-scanner-$SONAR_SCANNER_VERSION-linux
                - export SONAR_SCANNER_OPTS="-server"
                - export BW_OUTPUT=$SONAR_ROOT/bw-output
                - env | sort
                # download sonar scanner and wrapper
                - mkdir -p $BW_OUTPUT
                - curl --create-dirs -sSLo $SONAR_ROOT/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
                - unzip -o $SONAR_ROOT/sonar-scanner.zip -d $SONAR_ROOT/
                - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
                - curl --create-dirs -sSLo $SONAR_ROOT/build-wrapper-linux-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
                - unzip -o $SONAR_ROOT/build-wrapper-linux-x86.zip -d $SONAR_ROOT/
                - export PATH=$SONAR_ROOT/build-wrapper-linux-x86:$PATH
                # run cmake
                - mkdir sonarbuild && cd sonarbuild
                - cmake -DCMAKE_BUILD_TYPE=Debug -DTWINS_USE_SANITIZERS=OFF -DTWINS_BUILD_UT=ON ..
                # wrapped-build
                - build-wrapper-linux-x86-64 --out-dir $BW_OUTPUT make -j4
                - ctest -V --output-on-failure --timeout 20
                # prepare coverage report
                - mkdir gcovreport && cd gcovreport
                - find .. -name "*.o" | xargs gcov
                - cd ..
                - cd ..
                # scan
                - sonar-scanner -Dsonar.cfamily.build-wrapper-output=$BW_OUTPUT
            artifacts:
                - _sonar/**

pipelines:
    default:
        - step:
            name: Environment Info
            script:
                - lscpu
                - g++ --version
                - find _sonar || true
        - step: *build_and_test
        #- step: *build_and_test_and_cover
        - step: *build_and_test_sonar
